name: Tag Release

on:
  push:
    tags:
      - 'v*'

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      # Linux (Ubuntu 18.04 container) uses Node from NodeSource to avoid GLIBC_2.28 requirement
      - name: Install Node.js 18 (Ubuntu 18.04)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          apt-get update && apt-get install -y curl ca-certificates gnupg
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          npm i -g pnpm@9
      - name: Setup pnpm
        if: ${{ matrix.os != 'ubuntu-22.04' }}
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      - name: Setup Node.js
        if: ${{ matrix.os != 'ubuntu-22.04' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Sync version from tag to files
        env:
          VERSION: ${{ github.ref_name }}
        run: pnpm run version:set

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            container: ubuntu:18.04
          - os: windows-2022
          - os: macos-12
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Install Node.js 18 (Ubuntu 18.04)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          apt-get update && apt-get install -y curl ca-certificates gnupg
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          npm i -g pnpm@9
      - name: Setup pnpm
        if: ${{ matrix.os != 'ubuntu-22.04' }}
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      - name: Setup Node.js
        if: ${{ matrix.os != 'ubuntu-22.04' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install system deps for Linux (Ubuntu 18.04)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          apt-get update && apt-get install -y \
            libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev \
            libgtk-3-dev librsvg2-dev
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build Tauri app
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chatless-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/**

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: artifacts/**/*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate updater JSON (stable/alpha channels)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          UPDATER_PROXY_PREFIX: https://gh-proxy.com/
        run: pnpm run update:generate
      - name: Verify updater endpoints
        env:
          EXPECTED_VERSION: ${{ github.ref_name }}
          ENDPOINTS: |
            https://github.com/${{ github.repository }}/releases/download/updater/update.json
            https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/download/updater/update-proxy.json
        run: pnpm run update:verify

