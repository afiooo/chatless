name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The release version (e.g., 1.2.3). This will be the tag name.'
        required: true
        type: string
      release_notes:
        description: 'Release notes (supports Markdown).'
        required: false
        type: string
        default: 'New release!'
      platforms:
        description: 'Select platforms to build for this release.'
        required: true
        type: choice
        default: 'all'
        options:
        - all
        - ubuntu
        - windows
        - macos
        - ubuntu-windows
        - ubuntu-macos
        - windows-macos

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout latest main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Set version to inputs.version
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: pnpm run version:set
      - name: Commit and push version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json src-tauri/tauri.conf.json
          git commit -m "chore: set version to v${{ github.event.inputs.version }}"
          git push
  build-ubuntu:
    if: ${{ contains(github.event.inputs.platforms, 'all') || contains(github.event.inputs.platforms, 'ubuntu') }}
    runs-on: ubuntu-22.04
    container: ubuntu:18.04
    needs: [prepare]
    steps:
      - name: Prepare base tools in container
        run: apt-get update && apt-get install -y git ca-certificates curl xz-utils
      - name: Install Rust system dependencies (Ubuntu 18.04)
        run: apt-get update && apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev librsvg2-dev
      - name: Checkout latest main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'
      - name: Install Node.js 18 (Ubuntu 18.04)
        run: |
          apt-get update && apt-get install -y curl ca-certificates gnupg
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          npm i -g pnpm@9
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build Tauri app for release
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chatless-ubuntu-artifact
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/**/updater/*

  build-windows:
    if: ${{ contains(github.event.inputs.platforms, 'all') || contains(github.event.inputs.platforms, 'windows') }}
    runs-on: windows-2022
    needs: [prepare]
    steps:
      - name: Checkout latest main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build Tauri app for release
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chatless-windows-artifact
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe.zip
            src-tauri/target/release/bundle/**/updater/*

  build-macos:
    if: ${{ contains(github.event.inputs.platforms, 'all') || contains(github.event.inputs.platforms, 'macos') }}
    runs-on: macos-12
    needs: [prepare]
    steps:
      - name: Checkout latest main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build Tauri app for release
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chatless-macos-artifact
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/**/updater/*

  release:
    runs-on: ubuntu-22.04
    if: always()
    needs: [build-ubuntu, build-windows, build-macos]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ github.event.inputs.release_notes }}
          files: artifacts/**/*
          draft: false
          prerelease: ${{ contains(github.event.inputs.version, '-') }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate updater JSON and upload to updater release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          UPDATER_PROXY_PREFIX: https://gh-proxy.com/
        run: pnpm run update:generate
      - name: Verify updater endpoints
        env:
          EXPECTED_VERSION: ${{ github.event.inputs.version }}
          ENDPOINTS: |
            https://github.com/${{ github.repository }}/releases/download/updater/update.json
            https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/download/updater/update-proxy.json
        run: pnpm run update:verify