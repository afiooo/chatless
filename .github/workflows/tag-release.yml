name: Tag Release

on:
  push:
    tags:
      - 'v*'

# 需要写权限以创建 Release。若仓库设置为默认只读，这里会显式请求写权限。
permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint (non-blocking)
        run: pnpm lint
        continue-on-error: true
      - name: Type check
        run: pnpm typecheck
      - name: Sync version from tag to files
        env:
          VERSION: ${{ github.ref_name }}
        run: pnpm run version:set

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            container: ubuntu:22.04
          - os: windows-2022
          - os: macos-latest
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-next-

      - name: Install system deps for Linux (Ubuntu 22.04)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          apt-get update && apt-get install -y \
            build-essential pkg-config curl wget file \
            libssl-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            xdg-utils \
            desktop-file-utils

      - name: Cache Tauri bundle tools (Linux)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/tauri
          key: ${{ runner.os }}-tauri-${{ hashFiles('src-tauri/tauri.conf.json') }}
          restore-keys: |
            ${{ runner.os }}-tauri-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Inject commit SHA to env
        run: echo "NEXT_PUBLIC_GIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          NEXT_PUBLIC_GIT_SHA: ${{ github.sha }}
      - name: Upload artifacts (filtered bundles only)
        uses: actions/upload-artifact@v4
        with:
          name: chatless-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.dmg
            src-tauri/target/release/bundle/macos/*.app.tar.gz
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/**/*.sig
            src-tauri/target/release/bundle/**/*.sha256*
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.app.tar.gz
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*setup*.exe
            artifacts/**/*.msi
            artifacts/**/*.sig
            artifacts/**/*.sha256*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate updater JSON (stable/alpha channels)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          UPDATER_PROXY_PREFIX: https://gh-proxy.com/
          RELEASE_TAG: ${{ github.ref_name }}
        run: pnpm run update:generate
      - name: Verify updater endpoints
        env:
          EXPECTED_VERSION: ${{ github.ref_name }}
          ENDPOINTS: |
            https://github.com/${{ github.repository }}/releases/latest/download/update.json
            https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/latest/download/update.json
            https://github.com/${{ github.repository }}/releases/download/updater-alpha/update.json
            https://gh-proxy.com/https://github.com/${{ github.repository }}/releases/download/updater-alpha/update.json
        run: pnpm run update:verify
        continue-on-error: true

